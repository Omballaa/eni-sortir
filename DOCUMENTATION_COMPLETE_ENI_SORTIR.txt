================================================================================
                    DOCUMENTATION COMPLÈTE - ENI SORTIR
                    Application de Gestion des Sorties Collaboratives
                    
                          Préparation Oral - Présentation Projet
================================================================================

====================
1. PRÉSENTATION GÉNÉRALE
====================

1.1 CONTEXTE ET OBJECTIFS
--------------------------
• Application web collaborative pour l'École Nationale d'Informatique (ENI)
• Objectif : Faciliter l'organisation et la participation aux sorties entre collègues
• Public cible : Employés/Étudiants de l'ENI répartis sur plusieurs sites
• Problématique résolue : Centralisation et simplification de la gestion des activités collectives

1.2 FONCTIONNALITÉS PRINCIPALES
-------------------------------
• Création et gestion de sorties par les participants
• Système d'inscription/désinscription avec gestion des places
• Géolocalisation automatique des lieux avec API OpenStreetMap
• Messagerie intégrée par sortie avec notifications temps réel
• Interface d'administration pour la gestion des données de référence
• Workflow complet avec états de sortie et permissions adaptées

1.3 TECHNOLOGIES UTILISÉES
---------------------------
• Framework Backend : Symfony 7.1 (PHP 8.2+)
• Base de données : PostgreSQL avec Doctrine ORM 3.5
• Frontend : Bootstrap 5.3.2 + JavaScript ES6 natif
• Géolocalisation : Leaflet + API Nominatim (OpenStreetMap)
• Messagerie : WebSocket (Ratchet/Pawl) pour temps réel
• Sécurité : Symfony Security Bundle avec authentification par session

====================
2. ARCHITECTURE TECHNIQUE
====================

2.1 STRUCTURE GÉNÉRALE (MVC + SERVICES)
----------------------------------------
• Modèle : Entités Doctrine (src/Entity/)
• Vue : Templates Twig modulaires (templates/)
• Contrôleur : Controllers Symfony (src/Controller/)
• Services : Logique métier découplée (src/Service/)
• Commandes : Automatisation et maintenance (src/Command/)
• EventListeners : Événements automatiques (src/EventListener/)

2.2 ARCHITECTURE DES DONNÉES
-----------------------------
**Entités principales :**

PARTICIPANT (Utilisateur système)
├── id, pseudo (unique), nom, prenom
├── telephone, mail (unique), motDePasse (hashé)
├── administrateur (boolean), actif (boolean)
├── photo (upload), site (FK)
└── Relations : Sorties organisées, Inscriptions, Messages

SORTIE (Activité)
├── id, nom, dateHeureDebut, duree
├── dateLimiteInscription, nbInscriptionsMax
├── infosSortie (description), etat (FK)
├── lieu (FK), organisateur (FK Participant)
└── Relations : Inscriptions, GroupeMessage

LIEU (Géolocalisation)
├── id, nomLieu, rue
├── latitude, longitude (coordonnées GPS)
├── ville (FK)
└── Relations : Sorties

INSCRIPTION (Association Participant-Sortie)
├── participant + sortie (Composite PK)
├── dateInscription
└── Table de jointure avec métadonnées

ETAT (Workflow des sorties)
├── Créée : Brouillon organisateur
├── Ouverte : Publiée, inscriptions possibles
├── Fermée : Inscriptions closes
├── Clôturée : Sortie terminée automatiquement
└── Annulée : Annulation avec motif

2.3 SERVICES MÉTIER
-------------------
**GeocodingService**
• Géocodage automatique via API Nominatim
• Conversion adresse → coordonnées GPS
• Score de confiance et validation des résultats

**MessagerieSortieService**
• Gestion automatique des groupes de discussion
• Messages système (inscription, publication, annulation)
• Messages privés entre participants
• Notifications et statuts de lecture

2.4 SÉCURITÉ ET PERMISSIONS
----------------------------
• Authentification : pseudo/mot de passe avec hashage bcrypt
• Autorisation : ROLE_USER, ROLE_ADMIN
• Protection CSRF sur tous les formulaires
• Validation côté client et serveur
• Vérifications métier dans les contrôleurs

====================
3. FONCTIONNALITÉS DÉTAILLÉES
====================

3.1 GESTION DES SORTIES
-----------------------
**Cycle de vie complet :**
1. Création (état "Créée") - Brouillon privé organisateur
2. Publication (état "Ouverte") - Inscription possible
3. Fermeture manuelle/automatique (état "Fermée")
4. Clôture automatique après date de sortie (état "Clôturée")
5. Annulation possible à tout moment (état "Annulée")

**Fonctionnalités par rôle :**
• Organisateur : CRUD complet sur ses sorties en état "Créée"
• Participant : Inscription/désinscription si conditions remplies
• Administrateur : Vue globale et gestion des données de référence

**Validations métier :**
• Date limite ≤ Date de début de sortie
• Date limite ≥ Date du jour (inscription possible jour J)
• Nombre de places limité avec vérification en temps réel
• Vérification de l'état pour autoriser les actions

3.2 SYSTÈME DE GÉOLOCALISATION
------------------------------
**Workflow de création de lieu :**
1. Saisie adresse dans modal dédié
2. Géocodage automatique via API Nominatim
3. Validation coordonnées avec score de confiance
4. Intégration transparente dans formulaire de sortie
5. Visualisation sur carte Leaflet

**Avantages :**
• Localisation précise des sorties
• Aide à la navigation pour les participants
• Interface utilisateur intuitive
• Données cohérentes et validées

3.3 MESSAGERIE INTÉGRÉE
-----------------------
**Groupes automatiques :**
• Création automatique à la publication de sortie
• Ajout/retrait automatique lors inscriptions/désinscriptions
• Organisateur = administrateur du groupe

**Types de messages :**
• Messages utilisateur : Communication libre entre participants
• Messages système : Notifications automatiques (rejoint, quitte, annulation)
• Messages privés : Communication directe entre 2 participants

**Fonctionnalités temps réel :**
• WebSocket pour notifications instantanées
• Statuts de lecture (lu/non lu)
• Compteur de messages non lus
• Historique persistant

3.4 INTERFACE UTILISATEUR
-------------------------
**Dashboard principal :**
• Filtrage avancé : site, nom, dates, organisateur, état
• Vue adaptée : toutes sorties / mes inscriptions / non inscrit
• Recherche temps réel avec AJAX
• Actions rapides (inscription, consultation, modification)

**Modales interactives :**
• Affichage/création/modification sans rechargement
• Formulaires avec validation temps réel
• Feedback utilisateur avec toasts Bootstrap
• Gestion d'erreurs gracieuse

**Responsive design :**
• Interface Bootstrap 5.3 entièrement responsive
• Optimisé mobile/tablet/desktop
• Navigation intuitive avec icônes Bootstrap Icons

====================
4. ARCHITECTURE FRONTEND
====================

4.1 JAVASCRIPT MODULAIRE
-------------------------
**utils.js - Système central :**
• DevLogger : Logs conditionnels développement/production
• showToast() : Notifications utilisateur avec types et durées
• showModal() : Modales universelles AJAX avec z-index intelligent
• refreshAjax() : Refresh partiel ciblé sans rechargement
• submitModalForm() : Soumission AJAX avec feedback

**Modules spécialisés :**
• sortie.modal.js : Gestion complète des modales de sorties
• lieu.modal.js : Création/modification de lieux avec géocodage
• profil.modal.js : Affichage/édition des profils utilisateur
• map.component.js : Composant cartes Leaflet réutilisable

4.2 PATTERN AJAX GÉNÉRALISÉ
----------------------------
• Chargement dynamique des modales
• Soumission formulaires sans rechargement
• Refresh partiel des listes
• Gestion d'erreurs centralisée
• States management pour UX fluide

**Avantages :**
• Navigation fluide (SPA-like)
• Réduction de la bande passante
• Meilleure expérience utilisateur
• Feedback temps réel

====================
5. CONTRÔLEURS ET ROUTING
====================

5.1 CONTRÔLEURS PRINCIPAUX
---------------------------
**HomeController**
• Route : / (dashboard principal)
• Affichage liste sorties avec filtres
• Refresh AJAX pour mise à jour temps réel
• Gestion des états utilisateur (connecté/anonyme)

**SortieController** (#[Route('/sortie')])
• CRUD complet des sorties
• Actions : create, edit, show, publish, cancel, delete
• Inscription/désinscription AJAX
• Modales pour tous les formulaires

**LieuController** (#[Route('/lieu')])
• Création AJAX de lieux
• Intégration service de géocodage
• Modal de création avec sélection ville
• API pour formulaires dynamiques

**ProfilController** (#[Route('/profil')])
• Affichage profils utilisateur
• Modification données personnelles
• Upload photo de profil
• Modales pour consultation/édition

**AdminController** (#[Route('/admin')] + #[IsGranted('ROLE_ADMIN')])
• Interface administration
• CRUD Sites et Villes
• Statistiques et données agrégées
• API JSON pour tables dynamiques

**MessageController** (#[Route('/api/messages')])
• API REST pour messagerie
• Envoi/réception messages
• Notifications temps réel
• Gestion groupes et statuts

**SecurityController**
• Authentification (login/logout)
• Gestion sessions utilisateur
• Redirection selon rôles

5.2 PROTECTION ET AUTORISATIONS
--------------------------------
• #[IsGranted('ROLE_USER')] : Accès utilisateurs connectés
• #[IsGranted('ROLE_ADMIN')] : Accès administration
• Vérifications métier dans chaque action
• Protection CSRF automatique

====================
6. SERVICES ET LOGIQUE MÉTIER
====================

6.1 GEOCODING SERVICE
---------------------
```php
class GeocodingService {
    // API Nominatim (OpenStreetMap gratuite)
    public function geocodeAddress(string $address, ?string $city, ?string $postalCode): ?array
    // Retourne: ['latitude' => float, 'longitude' => float, 'confidence' => float]
}
```

**Fonctionnalités :**
• Géocodage adresse complète avec ville et code postal
• Score de confiance basé sur correspondance des données
• Gestion d'erreurs et timeout
• User-Agent requis par API Nominatim
• Cache potentiel pour optimisation

6.2 MESSAGERIE SORTIE SERVICE
-----------------------------
```php
class MessagerieSortieService {
    // Gestion automatique des groupes
    public function creerGroupePourSortie(Sortie $sortie): GroupeMessage
    public function ajouterParticipantAuGroupe(Sortie $sortie, Participant $participant)
    public function retirerParticipantDuGroupe(Sortie $sortie, Participant $participant)
    
    // Gestion des événements
    public function gererPublicationSortie(Sortie $sortie)
    public function gererAnnulationSortie(Sortie $sortie, string $motif)
    
    // Messagerie
    public function envoyerMessageGroupe(Participant $exp, GroupeMessage $groupe, string $contenu)
    public function envoyerMessagePrive(Participant $exp, Participant $dest, string $contenu)
}
```

6.3 EVENT LISTENERS
-------------------
**SortieSchedulerListener**
• Exécution automatique à chaque requête (limité à 1h d'intervalle)
• Clôture automatique des sorties passées
• Transition état "Ouverte/Fermée" → "Clôturée"
• Logging des opérations pour suivi

====================
7. COMMANDES ET AUTOMATISATION
====================

7.1 COMMANDS SYMFONY
--------------------
**LoadTestDataCommand**
• Génération données de test cohérentes
• Création Participants, Sites, Villes, Lieux, Sorties
• Relations automatiques et mots de passe par défaut
• Parfait pour développement et démonstration

**ClotureSortiesCommand**
• Alternative au listener pour CRON
• Fermeture automatique inscriptions dépassées
• Transition états selon dates
• Recommandé pour production avec planificateur

7.2 STRATÉGIES D'AUTOMATISATION
-------------------------------
• EventListener : Temps réel pour développement
• Command CRON : Contrôle précis pour production
• Logs détaillés pour traçabilité
• Gestion d'erreurs robuste

====================
8. GESTION DES DONNÉES
====================

8.1 DOCTRINE ORM ET MIGRATIONS
------------------------------
• Schema PostgreSQL optimisé avec index
• Relations complexes avec intégrité référentielle
• Migrations versionnées pour déploiement
• Contraintes métier au niveau base de données

8.2 REPOSITORIES SPÉCIALISÉS
-----------------------------
**SortieRepository**
• findByFilters() : Recherche multi-critères avec QueryBuilder
• findSortiesAvecInscriptions() : Jointures optimisées
• Pagination intégrée pour performances

**InscriptionRepository**
• findByParticipantAndSortie() : Vérification d'inscription
• findBySortie() : Liste participants d'une sortie
• Statistiques d'occupation

**Optimisations performances :**
• Eager Loading pour éviter requêtes N+1
• Index sur colonnes fréquemment filtrées
• Requêtes DQL optimisées pour rapports

====================
9. SÉCURITÉ ET VALIDATION
====================

9.1 AUTHENTIFICATION
--------------------
• Provider : Entity Participant avec propriété 'pseudo'
• Hashage : Algorithm 'auto' (bcrypt par défaut)
• Sessions : Symfony Session avec remember_me optionnel
• Protection CSRF : Activée sur tous formulaires

9.2 VALIDATION MULTI-NIVEAUX
-----------------------------
**Côté client (JavaScript) :**
• Validation temps réel des formulaires
• Vérification cohérence dates
• Feedback utilisateur immédiat

**Côté serveur (Symfony Validator) :**
• Contraintes sur entités (#[Assert\NotBlank], #[Assert\Email])
• Validation personnalisée (#[Assert\Callback])
• Messages d'erreur localisés

**Base de données :**
• Contraintes d'intégrité référentielle
• Index uniques sur pseudo et email
• Types de données stricts

9.3 EXEMPLE VALIDATION PERSONNALISÉE
------------------------------------
```php
// Dans l'entité Sortie
#[Assert\Callback]
public function validateDateLimiteInscription(ExecutionContextInterface $context): void {
    if ($this->dateLimiteInscription && $this->dateHeureDebut) {
        $today = new \DateTime('today midnight');
        $dateLimite = new \DateTime($this->dateLimiteInscription->format('Y-m-d') . ' 00:00:00');
        
        if ($dateLimite < $today) {
            $context->buildViolation('La date limite d\'inscription ne peut pas être dans le passé')
                ->atPath('dateLimiteInscription')->addViolation();
        }
        
        if ($this->dateLimiteInscription > $this->dateHeureDebut) {
            $context->buildViolation('La date limite doit être antérieure ou égale à la date de début')
                ->atPath('dateLimiteInscription')->addViolation();
        }
    }
}
```

====================
10. POINTS FORTS ARCHITECTURAUX
====================

10.1 MODULARITÉ ET RÉUTILISABILITÉ
----------------------------------
• Services découplés et injectés via DI
• Components JavaScript réutilisables
• Templates Twig modulaires avec includes
• API design cohérent entre contrôleurs

10.2 EXPÉRIENCE UTILISATEUR
---------------------------
• Interface fluide sans rechargements
• Feedback temps réel avec animations
• Responsive design optimal
• Gestion d'erreurs gracieuse avec fallback

10.3 ROBUSTESSE ET MAINTENABILITÉ
---------------------------------
• Validation à tous les niveaux
• Logging conditionnel dev/prod
• Transactions pour cohérence données
• Tests et documentation intégrés

10.4 ÉVOLUTIVITÉ
----------------
• Architecture en couches extensible
• API REST prête pour mobile/SPA
• WebSocket pour fonctionnalités temps réel
• Pattern Command pour nouvelles automatisations

====================
11. MÉTRIQUES ET PERFORMANCES
====================

11.1 STRUCTURE DU CODE
----------------------
• 8 Contrôleurs principaux
• 12 Entités Doctrine avec relations complexes
• 2 Services métier spécialisés
• 4 Modules JavaScript modulaires
• 15+ templates Twig responsive

11.2 FONCTIONNALITÉS IMPLÉMENTÉES
---------------------------------
• CRUD complet avec workflow avancé
• Géolocalisation automatique
• Messagerie temps réel
• Interface d'administration
• Système de permissions robuste
• Automatisation avec EventListeners/Commands

11.3 TECHNOLOGIES MODERNES
---------------------------
• Symfony 7.1 (dernière version LTS)
• PHP 8.2+ avec typage strict
• PostgreSQL pour robustesse enterprise
• Bootstrap 5.3 pour UI moderne
• JavaScript ES6+ natif (pas de framework lourd)

====================
12. DÉMO ET POINTS DE PRÉSENTATION
====================

12.1 PARCOURS UTILISATEUR DÉMO
------------------------------
1. **Connexion** : Interface de login claire
2. **Dashboard** : Vue d'ensemble avec filtres avancés
3. **Création sortie** : Modal avec géolocalisation automatique
4. **Publication** : Transition d'état et notification
5. **Inscription** : Process simplifié avec vérifications
6. **Messagerie** : Communication temps réel entre participants
7. **Administration** : Gestion des données de référence

12.2 DÉMONSTRATION TECHNIQUE
----------------------------
• **Architecture** : Expliquer pattern MVC + Services
• **Base de données** : Schéma relationnel optimisé
• **API** : Intégration OpenStreetMap pour géocodage
• **Temps réel** : WebSocket pour messagerie instantanée
• **Sécurité** : Authentification et autorisations
• **UX** : Interface responsive et actions AJAX

12.3 DÉFIS TECHNIQUES RELEVÉS
-----------------------------
• **Géolocalisation** : Intégration API externe avec fallback
• **Temps réel** : WebSocket pour messagerie sans surcharge
• **Workflow complexe** : États et transitions avec règles métier
• **Performance** : Optimisation requêtes et chargement AJAX
• **UX** : Interface fluide sur tous appareils

====================
13. CONCLUSION
====================

13.1 VALEUR AJOUTÉE DU PROJET
-----------------------------
• **Innovation** : Géolocalisation automatique pour sorties
• **Collaboration** : Messagerie intégrée par sortie
• **Robustesse** : Architecture enterprise-ready
• **Expérience** : Interface moderne et intuitive
• **Évolutivité** : Base solide pour nouvelles fonctionnalités

13.2 COMPÉTENCES DÉMONTRÉES
---------------------------
• **Développement full-stack** : Backend Symfony + Frontend moderne
• **Architecture logicielle** : Patterns MVC, Services, Repository
• **Base de données** : Modélisation complexe et optimisation
• **APIs** : Intégration services externes et développement endpoints
• **UX/UI** : Design responsive et interactions fluides
• **DevOps** : Configuration, déploiement, automatisation

13.3 PERSPECTIVES D'ÉVOLUTION
-----------------------------
• **Mobile** : Application React Native avec API existante
• **Notifications** : Push notifications et emails automatiques
• **Analytics** : Tableaux de bord et statistiques avancées
• **Intégrations** : Calendriers, réseaux sociaux, paiement en ligne
• **Performance** : Cache Redis, CDN pour assets statiques

================================================================================
            Document préparé pour présentation orale - ENI Sortir
                         Projet Symfony Full-Stack
================================================================================